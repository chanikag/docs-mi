{
  "configs": [
    {
      "title": "Auth Service",
      "options": [
        {
          "name": "enforcer.authService",
          "required": true,
          "description": "The configurations of gRPC netty based server in Enforcer that handles the incoming requests in the Choreo Connect.",
          "params": [
            {
              "name": "port",
              "type": "integer",
              "required": true,
              "default": "8081",
              "description": "Port of the Enforcer auth service."
            },
            {
              "name": "maxMessageSize",
              "type": "integer",
              "required": false,
              "default": "1000000000",
              "description": "Maximum message size in bytes"
            },
            {
              "name": "maxHeaderLimit",
              "type": "integer",
              "required": false,
              "default": "8192",
              "description": "Maximum header size in bytes"
            },
            {
              "name": "keepAliveTime",
              "type": "integer",
              "required": false,
              "default": "600",
              "description": "Keep alive time in seconds for connection with the router via external auth service"
            },
            {
              "name": "tokenPrivateKeyPath",
              "type": "string",
              "required": false,
              "default": "/home/wso2/security/keystore/mg.key",
              "description": "Private key path to use for the token generation"
            }
          ]
        }
      ],
      "exampleFile": "auth_service.toml"
    },
    {
      "title": "Auth Service thread pool",
      "options": [
        {
          "name": "enforcer.authService.threadPool",
          "required": true,
          "description": "The thread pool configurations of gRPC netty based server in Enforcer that handles the incoming requests in the Choreo Connect.",
          "params": [
            {
              "name": "coreSize",
              "type": "integer",
              "required": true,
              "default": "400",
              "description": "Minimum number of workers to keep alive"
            },
            {
              "name": "maxSize",
              "type": "integer",
              "required": false,
              "default": "500",
              "description": "Maximum pool size"
            },
            {
              "name": "keepAliveTime",
              "type": "integer",
              "required": false,
              "default": "600",
              "description": "Timeout in seconds for idle threads waiting for work"
            },
            {
              "name": "queueSize",
              "type": "integer",
              "required": false,
              "default": "1000",
              "description": "Queue size of the worker threads"
            }
          ]
        }
      ],
      "exampleFile": "auth_service_threadpool.toml"
    },
    {
      "title": "Filters",
      "options": [
        {
          "name": "enforcer.filters",
          "required": false,
          "description": "The configurations for engaging custom filters in the Enforcer.",
          "params": [
            {
              "name": "className",
              "type": "string",
              "required": true,
              "default": "",
              "description": "Fully qualified class name of the custom filter implementation."
            },
            {
              "name": "position",
              "type": "integer",
              "required": true,
              "default": "",
              "description": "Position should be the final position (including already available filters) after all the filters are engaged. Position starts from 1."
            },
            {
              "name": "configProperties",
              "type": "string",
              "required": false,
              "default": "",
              "description": "Filter specific custom configurations. Only `(string, string)` key-value pairs are accepted."
            }
          ]
        }
      ],
      "exampleFile": "filters.toml"
    },
    {
      "title": "Cache",
      "options": [
        {
          "name": "enforcer.cache",
          "required": true,
          "description": "The configurations of token caching in the Choreo Connect.",
          "params": [
            {
              "name": "enabled",
              "type": "boolean",
              "required": true,
              "default": "true",
              "description": "Enable/Disable token cache."
            },
            {
              "name": "maximumSize",
              "type": "integer",
              "required": true,
              "default": "10000",
              "description": "Maximum cache size."
            },
            {
              "name": "expiryTime",
              "type": "integer",
              "required": true,
              "default": "15",
              "description": "Expiry time in seconds"
            }
          ]
        }
      ],
      "exampleFile": "cache.toml"
    },
    {
      "title": "Management",
      "options": [
        {
          "name": "enforcer.management",
          "required": true,
          "description": "The configurations for the Enforcer REST API credentials.",
          "params": [
            {
              "name": "username",
              "type": "string",
              "required": true,
              "default": "admin",
              "description": "Username"
            },
            {
              "name": "password",
              "type": "string",
              "required": true,
              "default": "admin",
              "description": "Password"
            }
          ]
        }
      ],
      "exampleFile": "management.toml"
    },
    {
      "title": "REST Server",
      "options": [
        {
          "name": "enforcer.restserver",
          "required": true,
          "description": "The configuration of the Enforcer Admin REST server.",
          "params": [
            {
              "enabled": "enabled",
              "type": "boolean",
              "required": true,
              "default": "true",
              "description": "Enable/Disable Enforcer Admin REST server."
            }
          ]
        }
      ],
      "exampleFile": "rest_server.toml"
    },
    {
      "title": "JWT Generator",
      "options": [
        {
          "name": "enforcer.jwtGenerator",
          "required": false,
          "description": "The configuration of the backend jwt generation in the Choreo Connect.",
          "params": [
            {
              "name": "enabled",
              "type": "boolean",
              "required": true,
              "description": "Enable/Disable backend JWT generation"
            },
            {
              "name": "encoding",
              "type": "string",
              "required": false,
              "default": "base64",
              "possible": "base64, base64url",
              "description": "Encoding of the JWT"
            },
            {
              "name": "claimDialect",
              "type": "string",
              "required": true,
              "default": "http://wso2.org/claims",
              "description": "The JWT access token contains all claims that are defined in the enforcer.jwtGenerator.claimDialect element. The default value of this element is http://wso2.org/claims. To get the list of a specific user's claims that need to be included in the JWT, uncomment this element after enabling the JWT. It will include all claims in http://wso2.org/claims to the JWT access token."
            },
            {
              "name": "convertDialect",
              "type": "boolean",
              "required": false,
              "default": "false",
              "description": "Remap the OIDC claims into the configured dialect"
            },
            {
              "name": "header",
              "type": "string",
              "required": true,
              "default": "X-JWT-Assertion",
              "description": "The name of the HTTP header to which the JWT is attached."
            },
            {
              "name": "signingAlgorithm",
              "type": "string",
              "required": false,
              "default": "SHA256withRSA",
              "possible": "SHA256withRSA, NONE",
              "description": "The signing algorithm is used to sign the JWT."
            },
            {
              "name": "enableUserClaims",
              "type": "boolean",
              "required": false,
              "default": "false",
              "description": "Enable/Disable user claims."
            },
            {
              "name": "gatewayGeneratorImpl",
              "type": "string",
              "required": false,
              "default": "org.wso2.carbon.apimgt.common.gateway.jwtgenerator.APIMgtGatewayJWTGeneratorImpl",
              "description": "Custom JWT generator"
            },
            {
              "name": "claimsExtractorImpl",
              "type": "string",
              "required": false,
              "default": "org.wso2.carbon.apimgt.impl.token.ExtendedDefaultClaimsRetriever",
              "description": "Custom Claim Retriever to add custom claims into JWT"
            },
            {
              "name": "publicCertificatePath",
              "type": "string",
              "required": false,
              "default": "/home/wso2/security/truststore/mg.pem",
              "description": "Public certificate for generated JWT"
            },
            {
              "name": "privateKeyPath",
              "type": "string",
              "required": false,
              "default": "/home/wso2/security/keystore/mg.key",
              "description": "Private key path used for JWT generation"
            }
          ]
        }
      ],
      "exampleFile": "jwt_generator.toml"
    },
    {
      "title": "JWT Issuer",
      "options": [
        {
          "name": "enforcer.jwtIssuer",
          "required": false,
          "description": "The issuer configuration required to generate token at Choreo Connect.",
          "params": [
            {
              "name": "enabled",
              "type": "boolean",
              "required": true,
              "default": "true",
              "description": "Enable/Disable JWT generation."
            },
            {
              "name": "issuer",
              "type": "string",
              "required": true,
              "default": "https://localhost:9095/testkey",
              "description": "Issuer value for the JWT under iss claim."
            },
            {
              "name": "encoding",
              "type": "integer",
              "required": false,
              "default": "base64",
              "possible": "base64,base64url",
              "description": "Encoding of the JWT"
            },
            {
              "name": "claimDialect",
              "type": "string",
              "required": false,
              "default": "http://wso2.org/claims",
              "description": "A set of claims are identified as a dialect. Different dialects represent the same piece of information with different claim URIs."
            },
            {
              "name": "signingAlgorithm",
              "type": "string",
              "required": false,
              "default": "SHA256withRSA",
              "possible": "SHA256withRSA, NONE",
              "description": "The signing algorithm is used to sign the JWT."
            },
            {
              "name": "publicCertificatePath",
              "type": "string",
              "required": false,
              "default": "/home/wso2/security/truststore/mg.pem",
              "description": "Public certificate for generated JWT."
            },
            {
              "name": "privateKeyPath",
              "type": "string",
              "required": false,
              "default": "/home/wso2/security/keystore/mg.key",
              "description": "Private key path used for JWT generation."
            },
            {
              "name": "validityPeriod",
              "type": "integer",
              "required": false,
              "default": "3600",
              "description": "Validity period of the JWT in seconds."
            }
          ]
        }
      ],
      "exampleFile": "jwt_issuer.toml"
    },
    {
      "title": "JWT Issuer User",
      "options": [
        {
          "name": "enforcer.jwtIssuer.jwtUser",
          "required": true,
          "description": "Configure allowed users to use the JWT generated by the Choreo Connect. You can provide multiple users.",
          "params": [
            {
              "name": "username",
              "type": "string",
              "required": true,
              "default": "admin",
              "description": "Username"
            },
            {
              "name": "password",
              "type": "string",
              "required": true,
              "default": "$env{enforcer_admin_pwd}",
              "description": "Password"
            }
          ]
        }
      ],
      "exampleFile": "jwt_issuer_user.toml"
    },
    {
      "title": "Auth Header",
      "options": [
        {
          "name": "enforcer.security.authHeader",
          "required": false,
          "description": "Configurations related to Authorization header",
          "params": [
            {
              "name": "enableOutboundAuthHeader",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Remove authorization header from backend request"
            },
            {
              "name": "authorizationHeader",
              "type": "string",
              "required": true,
              "default": "authorization",
              "description": "Header name which authorization token coming from the downstream client"
            }
          ]
        }
      ],
      "exampleFile": "auth_header.toml"
    },
    {
      "title": "Mutual SSL",
      "options": [
        {
          "name": "enforcer.security.mutualSSL",
          "required": false,
          "description": "Configurations related to Mutual SSL",
          "params": [
            {
              "name": "certificateHeader",
              "type": "string",
              "required": true,
              "default": "X-WSO2-CLIENT-CERTIFICATE",
              "description": "Header name which client certificate coming from the downstream client"
            },
            {
              "name": "enableClientValidation",
              "type": "boolean",
              "required": true,
              "default": "true",
              "description": "Select between directly sending client certificate and sending client certificate within a header"
            },
            {
              "name": "clientCertificateEncode",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Enable/Disable client certificate decode process in Choreo Connect when the certificate is passed in a header."
            },
            {
              "name": "enableOutboundAuthHeader",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Remove client certificate header from backend request."
            }
          ]
        }
      ],
      "exampleFile": "mutual_ssl.toml"
    },
    {
      "title": "Token Service",
      "options": [
        {
          "name": "enforcer.security.tokenService",
          "required": false,
          "description": "Configuration required to JWT token authorization. You can provide multiple JWT issuers.",
          "params": [
            {
              "name": "name",
              "type": "string",
              "required": true,
              "description": "Provide unique name for the JWT issuer"
            },
            {
              "name": "issuer",
              "type": "string",
              "required": true,
              "description": "Issuer of the token. The issuer to validate a token is picked based on the iss value in the JWT"
            },
            {
              "name": "certificateAlias",
              "type": "string",
              "required": false,
              "description": "Alias name given in Enforcer truststore for the public certificate of the JWT issuer. "
            },
            {
              "name": "jwksURL",
              "type": "integer",
              "required": false,
              "description": "JWKS endpoint of the issuer."
            },
            {
              "name": "validateSubscription",
              "type": "boolean",
              "required": false,
              "default": "false",
              "description": "Enable/Disable subscription validation."
            },
            {
              "name": "consumerKeyClaim",
              "type": "string",
              "required": false,
              "description": "The claim in which the consumer key of the application is coming."
            },
            {
              "name": "certificateFilePath",
              "type": "string",
              "required": false,
              "description": "Certificate Filepath within Enforcer"
            }
          ]
        }
      ],
      "exampleFile": "token_service.toml"
    },
    {
      "title": "Throttling",
      "options": [
        {
          "name": "enforcer.throttling",
          "required": false,
          "description": "Configurations related to Throttling",
          "params": [
            {
              "name": "enableGlobalEventPublishing",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Connect with the central traffic manager."
            },
            {
              "name": "enableHeaderConditions",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Enable global advanced throttling based on request header conditions."
            },
            {
              "name": "enableQueryParamConditions",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Enable global advanced throttling based on request query parameter conditions."
            },
            {
              "name": "enableJwtClaimConditions",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Enable global advanced throttling based on jwt claim conditions."
            },
            {
              "name": "jmsConnectionInitialContextFactory",
              "type": "string",
              "required": true,
              "default": "org.wso2.andes.jndi.PropertiesFileInitialContextFactory",
              "description": "The message broker context factory."
            },
            {
              "name": "jmsConnectionProviderURL",
              "type": "string",
              "required": true,
              "default": "amqp://admin:$env{tm_admin_pwd}@carbon/carbon?brokerlist='tcp://apim:5672'",
              "description": "The message broker connection URL."
            }
          ]
        }
      ],
      "exampleFile": "throttling.toml"
    },
    {
      "title": "Binary Throttle publishing configurations",
      "options": [
        {
          "name": "enforcer.throttling.publisher",
          "required": true,
          "description": "Throttling configurations related to event publishing using a binary connection. The following are credentials required to establish connection between Traffic Manager",
          "params": [
            {
              "name": "username",
              "type": "string",
              "required": true,
              "default": "admin",
              "description": "Username"
            },
            {
              "name": "password",
              "type": "string",
              "required": true,
              "default": "$env{tm_admin_pwd}",
              "description": "Password"
            }
          ]
        }
      ],
      "exampleFile": "throttling_credentials.toml"
    },
    {
      "title": "Binary Throttle publishing URL group configurations",
      "options": [
        {
          "name": "enforcer.throttling.publisher.URLGroup",
          "required": true,
          "description": "Throttling configurations related to event publishing using a binary connection. The following are Receiver URL and the authentication URL of the Traffic manager node/nodes. You can provide multiple URL groups",
          "params": [
            {
              "name": "receiverURLs",
              "type": "string",
              "required": true,
              "default": "tcp://localhost:9611",
              "description": "Receiver URLs"
            },
            {
              "name": "authURLs",
              "type": "string",
              "required": true,
              "default": "ssl://localhost:9711",
              "description": "Auth URLs"
            }
          ]
        }
      ],
      "exampleFile": "throttling_urlgroup.toml"
    },
    {
      "title": "Binary Throttle publishing pool configurations",
      "options": [
        {
          "name": "enforcer.throttling.publisher.pool",
          "required": false,
          "description": "Throttling configurations related to event publishing using a binary connection. The following are data publisher object pool configurations",
          "params": [
            {
              "name": "maxIdleDataPublishingAgents",
              "type": "integer",
              "required": false,
              "default": "1000",
              "description": "Maximum idle number of connections"
            },
            {
              "name": "initIdleObjectDataPublishingAgents",
              "type": "integer",
              "required": false,
              "default": "200",
              "description": "Minimum idle number of connections"
            },
            {
              "name": "publisherThreadPoolCoreSize",
              "type": "integer",
              "required": false,
              "default": "200",
              "description": "Thread pool core size"
            },
            {
              "name": "publisherThreadPoolMaximumSize",
              "type": "integer",
              "required": false,
              "default": "1000",
              "description": "The maximum size of the thread pool"
            },
            {
              "name": "publisherThreadPoolKeepAliveTime",
              "type": "integer",
              "required": false,
              "default": "200",
              "description": "The timeframe after which the publisher thread pool is terminated in seconds"
            }
          ]
        }
      ],
      "exampleFile": "throttling_pool.toml"
    },
    {
      "title": "Binary Throttle publishing agent configurations",
      "options": [
        {
          "name": "enforcer.throttling.publisher.agent",
          "required": true,
          "description": "Throttling configurations related to event publishing using a binary connection. The following are data publisher agent configurations",
          "params": [
            {
              "name": "sslEnabledProtocols",
              "type": "string",
              "required": true,
              "default": "TLSv1.2",
              "description": "SSL Protocols"
            },
            {
              "name": "ciphers",
              "type": "string",
              "required": true,
              "default": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  ,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256  ,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
              "description": "ciphers"
            },
            {
              "name": "queueSize",
              "type": "integer",
              "required": true,
              "default": "32768",
              "description": "The size of the queue event disruptor which handles events before they are published. The value specified should always be the result of an exponent with 2 as the base."
            },
            {
              "name": "batchSize",
              "type": "integer",
              "required": true,
              "default": "200",
              "description": "The maximum number of events in a batch sent to the queue event disruptor at a given time."
            },
            {
              "name": "corePoolSize",
              "type": "integer",
              "required": true,
              "default": "1",
              "description": "The number of threads that will be reserved to handle events at the time you start."
            },
            {
              "name": "socketTimeoutMS",
              "type": "integer",
              "required": true,
              "default": "30000",
              "description": "Socket timeout in milliseconds."
            },
            {
              "name": "maxPoolSize",
              "type": "integer",
              "required": true,
              "default": "1",
              "description": "The maximum number of threads that should be reserved at any given time to handle events."
            },
            {
              "name": "keepAliveTimeInPool",
              "type": "integer",
              "required": true,
              "default": "20",
              "description": "The amount of time which threads in excess of the core pool size may remain idle before being terminated."
            },
            {
              "name": "reconnectionInterval",
              "type": "integer",
              "required": true,
              "default": "30",
              "description": "The time interval between reconnection in seconds."
            },
            {
              "name": "maxTransportPoolSize",
              "type": "integer",
              "required": true,
              "default": "250",
              "description": "Maximum pool size for TCP connection pool configurations (for data publishing)."
            },
            {
              "name": "maxIdleConnections",
              "type": "integer",
              "required": true,
              "default": "250",
              "description": "Maximum idle connections for TCP connection pool configurations (for data publishing)."
            },
            {
              "name": "evictionTimePeriod",
              "type": "integer",
              "required": true,
              "default": "5500",
              "description": "Eviction time period for TCP connection pool configurations (for data publishing)."
            },
            {
              "name": "minIdleTimeInPool",
              "type": "integer",
              "required": true,
              "default": "5000",
              "description": "Minimum idle time in pool for TCP connection pool configurations (for data publishing)."
            },
            {
              "name": "secureMaxTransportPoolSize",
              "type": "integer",
              "required": true,
              "default": "250",
              "description": "Maximum pool size for SSL connection pool configurations (for authentication)."
            },
            {
              "name": "secureMaxIdleConnections",
              "type": "integer",
              "required": true,
              "default": "250",
              "description": "Maximum number of idle connections for SSL connection pool configurations (for authentication)."
            },
            {
              "name": "secureEvictionTimePeriod",
              "type": "integer",
              "required": true,
              "default": "250",
              "description": "Eviction time period for SSL connection pool configurations (for authentication)."
            },
            {
              "name": "secureMinIdleTimeInPool",
              "type": "integer",
              "required": true,
              "default": "250",
              "description": "Minimum idle time in pool for SSL connection pool configurations (for authentication)."
            }
          ]
        }
      ],
      "exampleFile": "throttling_agent.toml"
    },
    {
      "title": "Metrics",
      "options": [
        {
          "name": "enforcer.metrics",
          "required": false,
          "description": "Metrics Configurations for Choreo Connect.",
          "params": [
            {
              "name": "enabled",
              "type": "boolean",
              "required": true,
              "default": "false",
              "description": "Enable/Disable Metrics."
            },
            {
              "name": "type",
              "type": "string",
              "required": true,
              "default": "azure",
              "description": "Type of the metrics server."
            }
          ]
        }
      ],
      "exampleFile": "metrics.toml"
    }
  ]
}
